// Code generated by MockGen. DO NOT EDIT.
// Source: transactions.go
//
// Generated by this command:
//
//	mockgen -source transactions.go -destination mocks/transactions_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "coinflow/coinflow-server/restful-api/internal/models"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionsRepo is a mock of TransactionsRepo interface.
type MockTransactionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepoMockRecorder
	isgomock struct{}
}

// MockTransactionsRepoMockRecorder is the mock recorder for MockTransactionsRepo.
type MockTransactionsRepoMockRecorder struct {
	mock *MockTransactionsRepo
}

// NewMockTransactionsRepo creates a new mock instance.
func NewMockTransactionsRepo(ctrl *gomock.Controller) *MockTransactionsRepo {
	mock := &MockTransactionsRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsRepo) EXPECT() *MockTransactionsRepoMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockTransactionsRepo) GetTransaction(tsId uuid.UUID) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", tsId)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockTransactionsRepoMockRecorder) GetTransaction(tsId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).GetTransaction), tsId)
}

// GetUserTransactionsAfterTimestamp mocks base method.
func (m *MockTransactionsRepo) GetUserTransactionsAfterTimestamp(usrId string, tm time.Time) ([]*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTransactionsAfterTimestamp", usrId, tm)
	ret0, _ := ret[0].([]*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTransactionsAfterTimestamp indicates an expected call of GetUserTransactionsAfterTimestamp.
func (mr *MockTransactionsRepoMockRecorder) GetUserTransactionsAfterTimestamp(usrId, tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTransactionsAfterTimestamp", reflect.TypeOf((*MockTransactionsRepo)(nil).GetUserTransactionsAfterTimestamp), usrId, tm)
}

// PostTransaction mocks base method.
func (m *MockTransactionsRepo) PostTransaction(ts *models.Transaction) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTransaction", ts)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTransaction indicates an expected call of PostTransaction.
func (mr *MockTransactionsRepoMockRecorder) PostTransaction(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).PostTransaction), ts)
}
